# TD 1
## Remarques préliminaires
* Pour l'ensemble des TDs, vous créerez un compte individuel sur [github](https://github.com/).
Vous nommerez ce compte de la façon suivante: `uvsq<MonNuméroÉtudiant>`.
Par exemple, pour un étudiant de numéro *21601234*, le compte sera `uvsq21601234`.
* Les commandes `git` sont à taper en ligne de commande dans un *shell*.
* Vous pouvez utiliser l'IDE de votre choix.
Sur le cartable numérique, [Eclipse](www.eclipse.org), [IntelliJ IDEA](http://www.jetbrains.com/idea/) et [Visual Studio Code](https://code.visualstudio.com/) sont installés.
* Vous répondrez aux questions directement dans ce fichier en complétant les emplacements correspondants
* Vous déposerez une archive contenant l'ensemble de votre travail sur Moodle.

## Partie en présentiel : découverte de `git`
Dans cet exercice, vous créerez une classe `Fraction` représentant un nombre rationnel et une classe `Main` qui testera les méthodes de la classe `Fraction` **avec des assertions**.
À chaque étape, consultez le statut des fichiers du projet ainsi que l'historique.

1. Sur la forge, créez le projet Java `SimpleFraction`;
En terme de *commits*, quelle différence constatez-vous entre cocher une (ou plusieurs) des cases *Initialize this repository with* et n'en cocher aucune ?
    > Il y a un commit en plus "init commit" en plus

    Pour la suite, ne cochez aucune de ces cases.
1. Localement, configurez `git` avec votre nom (`user.name`) et votre email (`user.email`);
    ```bash
    # git config --global user.name "ahmed.djeblahi"
    # git config --global user.email "ahmed.djeblahi@ens.uvsq.fr"
    
    ```
1. Initialisez le dépôt `git` local pour le projet;
    ```bash
    # git init
    ```
1. Créez la classe `Fraction` (vide pour le moment) et la classe `Main` (avec un simple affichage) dans le projet;
Vérifiez que le projet compile et s'exécute dans l'IDE;
Validez les changements;
    ```bash
    git add *
    git commit
    ```
1. Ajoutez un constructeur et la méthode `toString` à la classe `Fraction` et modifiez la classe `Main` en conséquence;
Validez les changements;
    ```Java
  	public static void main(String[]args) {
Fraction fract = new Fraction (5,6);
Fraction.toString(fract);
	
    
    ```
1. Publiez vos modifications sur le dépôt distant;
Vous utiliserez le protocole `https` pour cela;
Vérifiez avec le navigateur;
    ```bash
    git push
    ```
1. Sur la forge, ajoutez un fichier de documentation `README.md`.
Quelle syntaxe est utilisée pour ce fichier ?
    > Rmd Markdown
1. Récupérez localement les modifications effectuées sur la forge.
    ```bash
    git pull
    ```
1. Ajoutez les répertoires et fichiers issus de la compilation aux fichiers ignorés par `git` (fichier `.gitignore`);
    ```bash
    *.class
    ```
1. Retirez les fichiers de configuration de l'IDE du projet;
    ```bash
    # fichiers de config .config
    ```
    Ajoutez-les aux fichiers ignorés par `git`.
    ```bash
    # Copier ici les modifications de `.gitignore`
    ```
1. Configurez l'accès par clé publique/clé privée à la forge (cf. [Use the SSH protocol with Bitbucket Cloud](https://confluence.atlassian.com/bitbucket/use-the-ssh-protocol-with-bitbucket-cloud-221449711.html)).
    > pour configurer l'acces il faut entrer dans le fichier ou l'on veut enregistrer la clef,
    entrer une phrase dans le repertoire créé au prealable, l'identification est enenregistré la cle publique aussi
    
## Partie en distanciel : révisions et perfectionnement *shell* et *IDE*
### Maîtriser le *shell* de commandes
L'objectif de cet exercice est de vous faire réviser/découvrir les commandes de base du *shell* de votre machine.
Vous pouvez répondre en utilisant le shell de votre choix (*bash*, *Powershell*, ...).
Pour répondre à ces questions, vous devez effectuer les recherches documentaires adéquates (livre, web, ...).

1. Quel OS et quel shell de commande utilisez-vous ?
    >  os:Linux Shell:bash
1. Quelle commande permet d'obtenir de l'aide ?
Donnez un exemple.
    ```bash
    # man
    ```
1. Donnez la ou les commandes shell permettant de
    1. afficher les fichiers d'un répertoire triés par taille (taille affichée lisiblement)
        ```bash
        # ls -lsha
        ```
    1. compter le nombre de ligne d'un fichier
        ```bash
        # wc
        ```
    1. afficher les lignes du fichier `Main.java` contenant la chaîne `uneVariable`
        ```bash
        # grep uneVariable Main.java
        ```
    1. afficher récursivement les fichiers `.java` contenant la chaîne `uneVariable`
        ```bash
        # grep --include=*.java -rnw 'dossier de recherche' -e 'uneVariable'
        ```
    1. trouver les fichiers (pas les répertoires) nommés `README.md` dans une arborescence de répertoires
        ```bash
        # find / name README.md
        ```
    1. afficher les différences entre deux fichiers textes
        ```bash
        # diff fichier1.txt fichier2.txt
        ```
1. Expliquez en une ou deux phrases le rôle de ces commandes et dans quel contexte elles peuvent être utiles pour un développeur.
    * `ssh`
        > Permet de se connecter de façon sécurisée à un terminal d'un serveur a distance
    * `screen`/`tmux`
        > Sert a acceder sur un meme ecran plusieurs terminaux quand on veut utiliser des terminaux de machines differentes en même temps
    * `curl`/[HTTPie](https://httpie.org/)
        > permet de tester la connexion aux lien et transmettre des données, sert lors de travail en groupe
    * [jq](https://stedolan.github.io/jq/)
        > Répondre ici

### Découverte de votre *IDE*
Dans cet exercice, vous expliquerez en quelques phrases comment vous réalisez les actions ci-dessous dans votre IDE.
Vous pouvez choisir l'IDE/éditeur de texte de votre choix.
Pour réaliser cette exercice, vous devez bien évidemment vous reporter à la documentations de l'IDE ([IntelliJ IDEA](https://www.jetbrains.com/help/idea/discover-intellij-idea.html#developer-tools), [Visual Studio Code](https://code.visualstudio.com/docs), [Eclipse](https://help.eclipse.org/2020-09/index.jsp), ...).

1. Quels IDE ou éditeurs de texte utilisez-vous pour le développement Java ?
    > Eclipse sur la machine virtuel de la fac

    Pour la suite, ne considérez que l'un de vos choix.
1. Comment vérifier/définir que l'encodage utilisé est *UTF-8* ?
    > L'encodage utilisé sur éclipse est UTF-8, pour verifier il faut aller sur parametres ensuite encodage
1. Comment choisir le JDK à utiliser dans un projet ?
    > Elle est sur proposé a la creation du projet il suffit de la choisir a la creation
1. Comment préciser la version Java des sources dans un projet ?
    >  Elle est sur proposé a la creation du projet il suffit de la choisir a la creation
1. Comment ajouter une bibliothèque externe dans un projet ?
    > il faut aller dans /mon projet > proprieté > java build patch/ ensuite on selectionne la bibliotheque 
1. Comment reformater un fichier source Java ?
    > /commande+maj+f/
1. Comment trouver la déclaration d'une variable ou méthode ?
    > on double clique sur la varible et toute les fois ou la variable est applelé est surligné
1. Comment insérer un bloc de code prédéfini (*snippet*) ?
    >for "control-Espace"->for()[...]
1. Comment renommer une classe dans l'ensemble du projet ?
    > Refactor puis rename sur eclipse
1. Comment exécuter le programme en lui passant un paramètre en ligne de commande ?
    > double clique gauche sur la ligne, on clique sur deboguage
1. Comment déboguer le programme en visualisant le contenu d'une ou plusieurs variables ?
    > R
1. Quels paramètres ou fonctionnalités vous semblent particulièrement importants/utiles pour le développement Java ?
    > Rcompilation/execution -> Run -> arguments
